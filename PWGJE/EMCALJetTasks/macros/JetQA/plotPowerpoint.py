#! /usr/bin/env python
#
# This script generates a powerpoint presentation using plots generated by runJetQA.sh.
#
# Note: This was designed/tested for PbPb data and Pt-hard pp MC productions -- you may need to
#       tweak a few things for other cases. You should in general change what is plotted to suit
#       your needs -- the code should be intuitive to understand.
#
# Prerequisite: pip install python-pptx
#
# Author: <james.mulligan@yale.edu>

from pptx import Presentation
from pptx.util import Inches, Pt
import argparse
import os

def plotPowerpoint(runList, plotDir):
  
  # Set directory of QA plots (and output directory for presentation)
  if not plotDir.endswith("/"):
    plotDir = plotDir + "/"
  if not os.path.exists(plotDir):
    print "plotDir " + plotDir + "does not exist!"

  # Detect whether pt-hard production or not
  isPtHard = os.path.exists(plotDir + "AllRuns/QAoutput/PtHard")

  # Create a blank presentation
  qa = Presentation()
  
  # Define some slide layouts
  title_slide_layout = qa.slide_layouts[0]
  bullet_slide_layout = qa.slide_layouts[1]
  blank_slide_layout = qa.slide_layouts[6]
  
  # Make a title slide
  slide = qa.slides.add_slide(title_slide_layout)
  title = slide.shapes.title
  author = slide.placeholders[1]
  title.text = "LHC15o QA -- Full Jets"
  author.text = "James Mulligan, Yale University"
  
  # Make a general slide describing analysis details
  slide = qa.slides.add_slide(bullet_slide_layout)
  shapes = slide.shapes
  title_shape = shapes.title
  title_shape.text = 'LHC15o QA -- Full Jets'
  body_shape = shapes.placeholders[1]
  tf = body_shape.text_frame
  tf.text = "LHC15o: 5.02 TeV Pb-Pb"
  p = tf.add_paragraph()
  p.text = "Runlist: " + str(runList)
  p = tf.add_paragraph()
  p.text = 'Physics selection: Default (no pileup cuts)'
  p = tf.add_paragraph()
  p.text = 'Trigger: kINT7'
  p = tf.add_paragraph()
  p.text = 'Event selection'
  p = tf.add_paragraph()
  p.text = 'N vertex contributors > 0'
  p.level = 1
  p = tf.add_paragraph()
  p.text = '|Vz| < 10 cm'
  p.level = 1
  p = tf.add_paragraph()
  p.text = '|Vz - VzSPD| < 0.5 cm'
  p.level = 1
  #p = tf.add_paragraph()
  #p.text = 'pT,jet < 4 pT,hard'
  #p.level = 1
  p = tf.add_paragraph()
  p.text = 'Track selection: LHC15o track cuts (hybrid tracks)'
  p = tf.add_paragraph()
  p.text = 'EMCal corrections: AliEmcalCorrectionTask, all corrections enabled, default parameters used'
  p = tf.add_paragraph()
  p.text = 'PHOS corrections: PHOS Tender, default settings'
  p = tf.add_paragraph()
  p.text = 'Jet Selection:'
  p = tf.add_paragraph()
  p.text = 'Charged jets: anti-kT, R=0.2, TPC fiducial cut, background-subtracted'
  p.level = 1
  p = tf.add_paragraph()
  p.text = 'Full jets: anti-kT, R=0.2, EMCal/DCal fiducial cut'
  p.level = 1
  p = tf.add_paragraph()
  p.text = 'Background subtracted using 2.76 TeV scale factors'
  p.level = 2
  tf.fit_text('Calibri', 14)

  if isPtHard:
    makeAllRunsSlidesPtHard(qa, blank_slide_layout, plotDir)
  else:
    makeAllRunsSlides(qa, blank_slide_layout, plotDir)
  
  #--------------------------------------------------------------------
  # Now, do the run-by-run plots
  
  for run in runList.split():
    
    print "Plotting Run " +  str(run)
    
    if not os.path.exists(plotDir + str(run) + "/QAoutput/EventQA"):
      print "Run " + str(run) + " is empty -- skipping."
      continue
    
    if isPtHard:
      plotRunPtHard(qa, blank_slide_layout, plotDir, run)
    else:
      plotRun(qa, blank_slide_layout, plotDir, run)
  
  qa.save(plotDir + "qa.pptx")

######################################################
# Below are the worker functions that make the slides
######################################################

# Make slides for all runs summed together
def makeAllRunsSlides(qa, blank_slide_layout, plotDir):

  plotRun(qa, blank_slide_layout, plotDir, "AllRuns")

# Make slides for a single run
def plotRun(qa, blank_slide_layout, plotDir, run):
  
  isAllRuns = run is "AllRuns"
  
  imgWidth = 3.3
  # columns
  leftEdge = 0.1
  midEdge = 3.3
  rightEdge = 6.6
  # rows
  topEdge = 1.5
  midVertEdge = 2.9
  lowEdge = 5.1
  
  # Slide 1: Track plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  titleleft = Inches(2.6)
  titletop = Inches(0.)
  titleheight = Inches(0.8)
  titlewidth = Inches(5.)
  txBox = slide.shapes.add_textbox(titleleft, titletop+0.2, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run) + " -- Tracks"
  if isAllRuns:
    tf.text = "All Runs -- Tracks"
  tf.fit_text('Calibri', 40)
  
  img_path = plotDir + str(run) + "/QAoutput/EventQA/hEventReject.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackPt.png"
  left = Inches(midEdge)
  top = Inches(topEdge-0.5)
  if isAllRuns:
    top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/profTrackPtResolution.png"
  left = Inches(rightEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackPhi.png"
  left = Inches(leftEdge)
  top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackEta.png"
  left = Inches(midEdge)
  top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackEtaPhi.png"
  left = Inches(rightEdge)
  top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Slide 2: Clusters plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run) + " -- Clusters"
  if isAllRuns:
    tf.text = "All Runs -- Clusters"
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusEMCalEnergy.png"
  left = Inches(leftEdge)
  top = Inches(topEdge-0.6)
  if isAllRuns:
    top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusDCalEnergy.png"
  if os.path.exists(img_path):
    left = Inches(midEdge)
    top = Inches(topEdge-0.6)
    if isAllRuns:
      top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusPHOSEnergy.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge)
    top = Inches(topEdge-0.6)
    if isAllRuns:
      top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  if isAllRuns:
    img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusEnergyRatioEMC.png"
    if os.path.exists(img_path):
      left = Inches(leftEdge)
      top = Inches(lowEdge-0.9)
      width = Inches(imgWidth)
      slide.shapes.add_picture(img_path, left, top, width=width)

    img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusEnergyRatio.png"
    if os.path.exists(img_path):
      left = Inches(midEdge)
      top = Inches(lowEdge-0.9)
      width = Inches(imgWidth)
      slide.shapes.add_picture(img_path, left, top, width=width)

    img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusPhiEtaRatio.png"
    if isAllRuns:
      img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusPhiEta.png"
    left = Inches(rightEdge)
    top = Inches(lowEdge-0.6)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  else:
    img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusPhiEtaRatio.png"
    if isAllRuns:
      img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusPhiEta.png"
    left = Inches(midEdge)
    top = Inches(lowEdge-0.6)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)

  # Slide 3: Charged jet plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  imgWidth = 3.2
  titlewidth = Inches(7.)
  titleleft = Inches(2.5)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run) + " -- Charged Jets"
  if isAllRuns:
    tf.text = "All Runs -- Charged Jets"
  tf.fit_text('Calibri', 36)

  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetPtCorr.png"
  left = Inches(leftEdge+1)
  top = Inches(topEdge-0.5)
  if isAllRuns:
    top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

  if isAllRuns:
    img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetPtCorrCentral.png"
    left = Inches(rightEdge-1.)
    top = Inches(topEdge-0.5)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetRhoVsCent.png"
  left = Inches(rightEdge-1)
  top = Inches(topEdge)
  if isAllRuns:
    left = Inches(leftEdge)
    top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetPtLeadjetPt.png"
  left = Inches(leftEdge+1)
  if isAllRuns:
    left = Inches(midEdge)
  top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetEtaPhiRatio.png"
  left = Inches(rightEdge-1)
  top = Inches(lowEdge-0.5)
  if isAllRuns:
    img_path = plotDir + "AllRuns/QAoutput/Jets/hChargedJetEtaPhi.png"
    left = Inches(rightEdge)
    top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

  # Slide 4: Full jet plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run) + " -- Full Jets"
  if isAllRuns:
    tf.text = "All Runs -- Full Jets"
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPtCorr.png"
  left = Inches(leftEdge+1.)
  top = Inches(topEdge-0.5)
  if isAllRuns:
    top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

  if isAllRuns:
    img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPtCorrCentral.png"
    left = Inches(rightEdge-1.)
    top = Inches(topEdge-0.5)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPtCorrCalo.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge-1)
    top = Inches(topEdge-0.5)
    if isAllRuns:
      left = Inches(leftEdge)
      top = Inches(lowEdge-0.9)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)

  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPtLeadjetPt.png"
  left = Inches(leftEdge+1)
  if isAllRuns:
    left = Inches(midEdge)
  top = Inches(lowEdge-0.5)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetEtaPhiRatio.png"
  left = Inches(rightEdge-1)
  top = Inches(lowEdge-0.5)
  if isAllRuns:
    img_path = plotDir + "AllRuns/QAoutput/Jets/hFullJetEtaPhi.png"
    left = Inches(rightEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

# Make slides for all runs summed together, Pt-hard production
def makeAllRunsSlidesPtHard(qa, blank_slide_layout, plotDir):

  slide = qa.slides.add_slide(blank_slide_layout)
  left = Inches(3.7)
  top = Inches(0.2)
  height = Inches(0.8)
  width = Inches(5.)
  txBox = slide.shapes.add_textbox(left, top, width, height)
  tf = txBox.text_frame
  tf.text = "All Runs"
  tf.fit_text('Calibri', 40)
  
  img_path = plotDir + "AllRuns/QAoutput/EventQA/hEventReject.png"
  left = Inches(0.3)
  top = Inches(1.)
  width = Inches(4.3)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/PtHard/hPtHardNEvents.png"
  left = Inches(5.1)
  top = Inches(1.)
  width = Inches(4.3)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/PtHard/hPtHardScaleFactor.png"
  left = Inches(0.3)
  top = Inches(4.2)
  width = Inches(4.3)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/PtHard/hPtHard.png"
  left = Inches(5.1)
  top = Inches(4.2)
  width = Inches(4.3)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Do plots for AllRuns
  imgWidth = 3.3
  # columns
  leftEdge = 0.1
  midEdge = 3.3
  rightEdge = 6.6
  # rows
  topEdge = 1.5
  midVertEdge = 2.9
  lowEdge = 5.1
  
  # Slide 1: Track plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  titleleft = Inches(3.3)
  titletop = Inches(0.)
  titleheight = Inches(0.8)
  titlewidth = Inches(5.)
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "All Runs - Tracks"
  tf.fit_text('Calibri', 36)
  
  # Track plots
  img_path = plotDir + "AllRuns/QAoutput/Tracks/hTrackPhi.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Tracks/hTrackPt.png"
  left = Inches(midEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Tracks/hTrackEtaPhi.png"
  left = Inches(rightEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Tracks/profTrackPtResolution.png"
  left = Inches(leftEdge)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Tracks/profTrackPtResolutionMC.png"
  left = Inches(midEdge)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Tracks/hTrackingEfficiency1D.png"
  left = Inches(rightEdge)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth+0.1)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Slide 2: Clusters plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "All Runs - Clusters"
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusEMCalEnergy.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusDCalEnergy.png"
  if os.path.exists(img_path):
    left = Inches(midEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusPHOSEnergy.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Clusters/hClusPhiEta.png"
  left = Inches(midEdge)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Slide 3: Jet plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "All Runs - Jets"
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + "AllRuns/QAoutput/Jets/hChargedJetPt.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Jets/hFullJetPt.png"
  left = Inches(midEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Jets/hFullJetPtCalo.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Jets/hChargedJetEtaPhi.png"
  left = Inches(leftEdge+1)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + "AllRuns/QAoutput/Jets/hFullJetEtaPhi.png"
  left = Inches(rightEdge-1)
  top = Inches(lowEdge-1.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

# Make slides for a single run, Pt-hard production
def plotRunPtHard(qa, blank_slide_layout, plotDir, run):
  # Define some dimensions
  imgWidth = 3.2
  # columns
  leftEdge = 0.1
  midEdge = 3.3
  rightEdge = 6.6
  # rows
  topEdge = 0.6
  midVertEdge = 2.9
  lowEdge = 5.1
  
  # Slide 1: Events + Track plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  titleleft = Inches(3.7)
  titletop = Inches(0.)
  titleheight = Inches(0.8)
  titlewidth = Inches(5.)
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run)
  tf.fit_text('Calibri', 36)
  
  # Left column: Event plots
  img_path = plotDir + str(run) + "/QAoutput/EventQA/hEventReject.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/PtHard/hPtHardNEvents.png"
  left = Inches(leftEdge)
  top = Inches(midVertEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/PtHard/hPtHard.png"
  left = Inches(leftEdge)
  top = Inches(lowEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Middle column: track plots
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackingEfficiency1D.png"
  left = Inches(midEdge+0.15)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/profTrackPtResolution.png"
  left = Inches(midEdge)
  top = Inches(midVertEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/profTrackPtResolutionMC.png"
  left = Inches(midEdge)
  top = Inches(lowEdge+0.1)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Right column: track plots
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackPt.png"
  left = Inches(rightEdge)
  top = Inches(0.)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackPhi.png"
  left = Inches(rightEdge)
  top = Inches(midVertEdge+0.25)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Tracks/hTrackEtaPhi.png"
  left = Inches(rightEdge+0.2)
  top = Inches(lowEdge+0.3)
  width = Inches(imgWidth-0.2)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Slide 2: Clusters plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  imgWidth = 3.3
  topEdge = 1.5
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run)
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusEMCalEnergy.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusDCalEnergy.png"
  if os.path.exists(img_path):
    left = Inches(midEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusPHOSEnergy.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Clusters/hClusPhiEtaRatio.png"
  left = Inches(midEdge)
  top = Inches(lowEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  # Slide 3: Jet plots --------------------------
  slide = qa.slides.add_slide(blank_slide_layout)
  
  # Title
  txBox = slide.shapes.add_textbox(titleleft, titletop, titlewidth, titleheight)
  tf = txBox.text_frame
  tf.text = "Run " + str(run)
  tf.fit_text('Calibri', 36)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetPt.png"
  left = Inches(leftEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPt.png"
  left = Inches(midEdge)
  top = Inches(topEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetPtCalo.png"
  if os.path.exists(img_path):
    left = Inches(rightEdge)
    top = Inches(topEdge)
    width = Inches(imgWidth)
    slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hChargedJetEtaPhi.png"
  left = Inches(leftEdge+1)
  top = Inches(lowEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)
  
  img_path = plotDir + str(run) + "/QAoutput/Jets/hFullJetEtaPhiRatio.png"
  left = Inches(rightEdge-1)
  top = Inches(lowEdge)
  width = Inches(imgWidth)
  slide.shapes.add_picture(img_path, left, top, width=width)

#---------------------------------------------------------------------------------------------------
if __name__ == '__main__':
  # Define arguments
  parser = argparse.ArgumentParser(description="Create a run-by-run QA presentation")
  parser.add_argument("-r", "--runList", action="store",
                      type=str, metavar="runList",
                      default="1 2",
                      help="List of runs to iterate over")
  parser.add_argument("-d", "--plotDir", action="store",
                      type=str, metavar="plotDir",
                      default="./",
                      help="Location of QA plots (and output dir for QA presentation)")
                      
  # Parse the arguments
  args = parser.parse_args()
  
  plotPowerpoint(args.runList, args.plotDir)
